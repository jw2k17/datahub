"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[16453],{39744:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>m,contentTitle:()=>u,default:()=>h,frontMatter:()=>p,metadata:()=>g,toc:()=>d});a(96540);var t=a(15680),r=a(53720),l=a(5400);function i(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function o(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))})),e}function s(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},l=Object.keys(e);for(t=0;t<l.length;t++)a=l[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)a=l[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}const p={title:"AI/ML Framework Integration with DataHub",slug:"/api/tutorials/ml",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/api/tutorials/ml.md"},u="AI/ML Framework Integration with DataHub",g={unversionedId:"docs/api/tutorials/ml",id:"docs/api/tutorials/ml",title:"AI/ML Framework Integration with DataHub",description:"Why Integrate Your AI/ML System with DataHub?",source:"@site/genDocs/docs/api/tutorials/ml.md",sourceDirName:"docs/api/tutorials",slug:"/api/tutorials/ml",permalink:"/docs/api/tutorials/ml",draft:!1,editUrl:"https://github.com/datahub-project/datahub/blob/master/docs/api/tutorials/ml.md",tags:[],version:"current",frontMatter:{title:"AI/ML Framework Integration with DataHub",slug:"/api/tutorials/ml",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/api/tutorials/ml.md"},sidebar:"overviewSidebar",previous:{title:"Data Lineage",permalink:"/docs/api/tutorials/lineage"},next:{title:"Feature Store Integration With DataHub",permalink:"/docs/api/tutorials/ml_feature_store"}},m={},d=[{value:"Why Integrate Your AI/ML System with DataHub?",id:"why-integrate-your-aiml-system-with-datahub",level:2},{value:"Goals Of This Guide",id:"goals-of-this-guide",level:2},{value:"Core AI Concepts",id:"core-ai-concepts",level:2},{value:"Basic Setup",id:"basic-setup",level:2},{value:"Create Simple AI Assets",id:"create-simple-ai-assets",level:2},{value:"Create a Model Group",id:"create-a-model-group",level:3},{value:"Create a Model",id:"create-a-model",level:3},{value:"Create an Experiment",id:"create-an-experiment",level:3},{value:"Create a Training Run",id:"create-a-training-run",level:3},{value:"Define Entity Relationships",id:"define-entity-relationships",level:2},{value:"Add Model To Model Group",id:"add-model-to-model-group",level:3},{value:"Add Run To Experiment",id:"add-run-to-experiment",level:3},{value:"Add Run To Model",id:"add-run-to-model",level:3},{value:"Add Run To Model Group",id:"add-run-to-model-group",level:3},{value:"Add Dataset To Run",id:"add-dataset-to-run",level:3},{value:"Full Overview",id:"full-overview",level:2},{value:"What&#39;s Next?",id:"whats-next",level:2}],c={toc:d},y="wrapper";function h(e){var{components:n}=e,a=s(e,["components"]);return(0,t.yg)(y,o(function(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{},t=Object.keys(a);"function"==typeof Object.getOwnPropertySymbols&&(t=t.concat(Object.getOwnPropertySymbols(a).filter((function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable})))),t.forEach((function(n){i(e,n,a[n])}))}return e}({},c,a),{components:n,mdxType:"MDXLayout"}),(0,t.yg)("h1",{id:"aiml-framework-integration-with-datahub"},"AI/ML Framework Integration with DataHub"),(0,t.yg)("h2",{id:"why-integrate-your-aiml-system-with-datahub"},"Why Integrate Your AI/ML System with DataHub?"),(0,t.yg)("p",null,"As a data practitioner, keeping track of your AI experiments, models, and their relationships can be challenging.\nDataHub makes this easier by providing a central place to organize and track your AI assets."),(0,t.yg)("p",null,"This guide will show you how to integrate your AI workflows with DataHub.\nWith integrations for popular ML platforms like MLflow and Amazon SageMaker, DataHub enables you to easily find and share AI models across your organization, track how models evolve over time, and understand how training data connects to each model.\nMost importantly, it enables seamless collaboration on AI projects by making everything discoverable and connected."),(0,t.yg)("h2",{id:"goals-of-this-guide"},"Goals Of This Guide"),(0,t.yg)("p",null,"In this guide, you'll learn how to:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Create your basic AI components (models, experiments, runs)"),(0,t.yg)("li",{parentName:"ul"},"Connect these components to build a complete AI system"),(0,t.yg)("li",{parentName:"ul"},"Track relationships between models, data, and experiments")),(0,t.yg)("h2",{id:"core-ai-concepts"},"Core AI Concepts"),(0,t.yg)("p",null,"Here's what you need to know about the key components in DataHub:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Experiments")," are collections of training runs for the same project, like all attempts to build a churn predictor"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Training Runs")," are attempts to train a model within an experiment, capturing parameters and results"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Model Groups")," organize related models together, like all versions of your churn predictor"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Models")," are successful training runs registered for production use")),(0,t.yg)("p",{align:"center"},(0,t.yg)("img",{width:"70%",src:"https://raw.githubusercontent.com/datahub-project/static-assets/main/imgs/apis/tutorials/ml/concept-diagram-dh-term.png"})),(0,t.yg)("p",null,"The hierarchy works like this:"),(0,t.yg)("ol",null,(0,t.yg)("li",{parentName:"ol"},"Every run belongs to an experiment"),(0,t.yg)("li",{parentName:"ol"},"Successful runs can be registered as models"),(0,t.yg)("li",{parentName:"ol"},"Models belong to a model group"),(0,t.yg)("li",{parentName:"ol"},"Not every run becomes a model")),(0,t.yg)("admonition",{title:"Terminology Mapping",type:"note"},(0,t.yg)("p",{parentName:"admonition"},"Different AI platforms (MLflow, Amazon SageMaker) have their own terminology.\nTo keep things consistent, we'll use DataHub's terms throughout this guide.\nHere's how DataHub's terminology maps to these platforms:"),(0,t.yg)("table",{parentName:"admonition"},(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",{parentName:"tr",align:null},"DataHub"),(0,t.yg)("th",{parentName:"tr",align:null},"Description"),(0,t.yg)("th",{parentName:"tr",align:null},"MLflow"),(0,t.yg)("th",{parentName:"tr",align:null},"SageMaker"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"ML Model Group"),(0,t.yg)("td",{parentName:"tr",align:null},"Collection of related models"),(0,t.yg)("td",{parentName:"tr",align:null},"Model"),(0,t.yg)("td",{parentName:"tr",align:null},"Model Group")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"ML Model"),(0,t.yg)("td",{parentName:"tr",align:null},"Versioned artifact in a model group"),(0,t.yg)("td",{parentName:"tr",align:null},"Model Version"),(0,t.yg)("td",{parentName:"tr",align:null},"Model Version")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"ML Training Run"),(0,t.yg)("td",{parentName:"tr",align:null},"Single training attempt"),(0,t.yg)("td",{parentName:"tr",align:null},"Run"),(0,t.yg)("td",{parentName:"tr",align:null},"Training Job")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"ML Experiment"),(0,t.yg)("td",{parentName:"tr",align:null},"Collection of training runs"),(0,t.yg)("td",{parentName:"tr",align:null},"Experiment"),(0,t.yg)("td",{parentName:"tr",align:null},"Experiment"))))),(0,t.yg)("p",null,"For platform-specific details, see our integration guides for ",(0,t.yg)("a",{parentName:"p",href:"/docs/generated/ingestion/sources/mlflow"},"MLflow")," and ",(0,t.yg)("a",{parentName:"p",href:"/docs/generated/ingestion/sources/sagemaker"},"Amazon SageMaker"),"."),(0,t.yg)("h2",{id:"basic-setup"},"Basic Setup"),(0,t.yg)("p",null,"To follow this tutorial, you'll need DataHub Quickstart deployed locally.\nFor detailed steps, see the ",(0,t.yg)("a",{parentName:"p",href:"/docs/quickstart"},"Datahub Quickstart Guide"),"."),(0,t.yg)("p",null,"Next, set up the Python client for DataHub using ",(0,t.yg)("inlineCode",{parentName:"p"},"DatahubAIClient"),"defined in ",(0,t.yg)("a",{parentName:"p",href:"https://github.com/datahub-project/datahub/blob/master/metadata-ingestion/examples/ai/dh_ai_client.py"},"here"),"."),(0,t.yg)("p",null,"Create a token in DataHub UI and replace ",(0,t.yg)("inlineCode",{parentName:"p"},"<your_token>")," with your token:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},'from dh_ai_client import DatahubAIClient\n\nclient = DatahubAIClient(token="<your_token>", server_url="http://localhost:9002")\n')),(0,t.yg)("admonition",{title:"Verifying via GraphQL",type:"note"},(0,t.yg)("p",{parentName:"admonition"},"Throughout this guide, we'll show how to verify changes using GraphQL queries.\nYou can run these queries in the DataHub UI at ",(0,t.yg)("inlineCode",{parentName:"p"},"https://localhost:9002/api/graphiql"),".")),(0,t.yg)("h2",{id:"create-simple-ai-assets"},"Create Simple AI Assets"),(0,t.yg)("p",null,"Let's create the basic building blocks of your ML system. These components will help you organize your AI work and make it discoverable by your team."),(0,t.yg)("h3",{id:"create-a-model-group"},"Create a Model Group"),(0,t.yg)("p",null,'A model group contains different versions of a similar model. For example, all versions of your "Customer Churn Predictor" would go in one group.'),(0,t.yg)(r.A,{mdxType:"Tabs"},(0,t.yg)(l.A,{value:"basic",label:"Basic",mdxType:"TabItem"},"Create a basic model group with just an identifier:",(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},'client.create_model_group(\n    group_id="airline_forecast_models_group",\n)\n'))),(0,t.yg)(l.A,{value:"advanced",label:"Advanced",mdxType:"TabItem"},"Add rich metadata like descriptions, creation timestamps, and team information:",(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},'client.create_model_group(\n    group_id="airline_forecast_models_group",\n    properties=models.MLModelGroupPropertiesClass(\n        name="Airline Forecast Models Group",\n        description="Group of models for airline passenger forecasting",\n        created=models.TimeStampClass(\n            time=1628580000000, actor="urn:li:corpuser:datahub"\n        ),\n    ),\n)\n')))),(0,t.yg)("p",null,"Let's verify that our model group was created:"),(0,t.yg)(r.A,{mdxType:"Tabs"},(0,t.yg)(l.A,{value:"UI",label:"UI",mdxType:"TabItem"},"See your new model group in the DataHub UI:",(0,t.yg)("p",{align:"center"},(0,t.yg)("img",{width:"70%",src:"https://raw.githubusercontent.com/datahub-project/static-assets/main/imgs/apis/tutorials/ml/model-group-empty.png"}))),(0,t.yg)(l.A,{value:"graphql",label:"GraphQL",mdxType:"TabItem"},"Query your model group to check its properties:",(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-graphql"},'query {\n  mlModelGroup(\n    urn:"urn:li:mlModelGroup:(urn:li:dataPlatform:mlflow,airline_forecast_models_group,PROD)"\n  ) {\n    name\n    description\n  }\n}\n')),(0,t.yg)("p",null,"The response will show your model group's details:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "mlModelGroup": {\n      "name": "airline_forecast_models_group",\n      "description": "Group of models for airline passenger forecasting"\n    }\n  }\n}\n')))),(0,t.yg)("h3",{id:"create-a-model"},"Create a Model"),(0,t.yg)("p",null,"Next, let's create a specific model version that represents a trained model ready for deployment."),(0,t.yg)(r.A,{mdxType:"Tabs"},(0,t.yg)(l.A,{value:"basic",label:"Basic",mdxType:"TabItem"},"Create a model with just the required version:",(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},'client.create_model(\n    model_id="arima_model",\n    version="1.0",\n)\n'))),(0,t.yg)(l.A,{value:"advanced",label:"Advanced",mdxType:"TabItem"},"Include metrics, parameters, and metadata for production use:",(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},'client.create_model(\n    model_id="arima_model",\n    properties=models.MLModelPropertiesClass(\n        name="ARIMA Model",\n        description="ARIMA model for airline passenger forecasting",\n        customProperties={"team": "forecasting"},\n        trainingMetrics=[\n            models.MLMetricClass(name="accuracy", value="0.9"),\n            models.MLMetricClass(name="precision", value="0.8"),\n        ],\n        hyperParams=[\n            models.MLHyperParamClass(name="learning_rate", value="0.01"),\n            models.MLHyperParamClass(name="batch_size", value="32"),\n        ],\n        externalUrl="https:localhost:5000",\n        created=models.TimeStampClass(\n            time=1628580000000, actor="urn:li:corpuser:datahub"\n        ),\n        lastModified=models.TimeStampClass(\n            time=1628580000000, actor="urn:li:corpuser:datahub"\n        ),\n        tags=["forecasting", "arima"],\n    ),\n    version="1.0",\n    alias="champion",\n)\n')))),(0,t.yg)("p",null,"Let's verify our model:"),(0,t.yg)(r.A,{mdxType:"Tabs"},(0,t.yg)(l.A,{value:"UI",label:"UI",mdxType:"TabItem"},"Check your model's details in the DataHub UI:",(0,t.yg)("p",{align:"center"},(0,t.yg)("img",{width:"70%",src:"https://raw.githubusercontent.com/datahub-project/static-assets/main/imgs/apis/tutorials/ml/model-empty.png"}))),(0,t.yg)(l.A,{value:"graphql",label:"GraphQL",mdxType:"TabItem"},"Query your model's information:",(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-graphql"},'query {\n  mlModel(\n    urn:"urn:li:mlModel:(urn:li:dataPlatform:mlflow,arima_model,PROD)"\n  ) {\n    name\n    description\n    versionProperties {\n      version {\n        versionTag\n      }\n    }\n  }\n}\n')),(0,t.yg)("p",null,"The response will show your model's details:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "mlModel": {\n      "name": "arima_model",\n      "description": "ARIMA model for airline passenger forecasting",\n      "versionProperties": {\n        "version": {\n          "versionTag": "1.0"\n        }\n      }\n    }\n  }\n}\n')))),(0,t.yg)("h3",{id:"create-an-experiment"},"Create an Experiment"),(0,t.yg)("p",null,"An experiment helps organize multiple training runs for a specific project."),(0,t.yg)(r.A,{mdxType:"Tabs"},(0,t.yg)(l.A,{value:"basic",label:"Basic",mdxType:"TabItem"},"Create a basic experiment:",(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},'client.create_experiment(\n    experiment_id="airline_forecast_experiment",\n)\n'))),(0,t.yg)(l.A,{value:"advanced",label:"Advanced",mdxType:"TabItem"},"Add context and metadata:",(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},'client.create_experiment(\n    experiment_id="airline_forecast_experiment",\n    properties=models.ContainerPropertiesClass(\n        name="Airline Forecast Experiment",\n        description="Experiment to forecast airline passenger numbers",\n        customProperties={"team": "forecasting"},\n        created=models.TimeStampClass(\n            time=1628580000000, actor="urn:li:corpuser:datahub"\n        ),\n        lastModified=models.TimeStampClass(\n            time=1628580000000, actor="urn:li:corpuser:datahub"\n        ),\n    ),\n)\n')))),(0,t.yg)("p",null,"Verify your experiment:"),(0,t.yg)(r.A,{mdxType:"Tabs"},(0,t.yg)(l.A,{value:"UI",label:"UI",mdxType:"TabItem"},"See your experiment's details in the UI:",(0,t.yg)("p",{align:"center"},(0,t.yg)("img",{width:"70%",src:"https://raw.githubusercontent.com/datahub-project/static-assets/main/imgs/apis/tutorials/ml/experiment-empty.png"}))),(0,t.yg)(l.A,{value:"graphql",label:"GraphQL",mdxType:"TabItem"},"Query your experiment's information:",(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-graphql"},'query {\n  container(\n    urn:"urn:li:container:airline_forecast_experiment"\n  ) {\n    name\n    description\n    properties {\n      customProperties\n    }\n  }\n}\n')),(0,t.yg)("p",null,"Check the response:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "container": {\n      "name": "Airline Forecast Experiment",\n      "description": "Experiment to forecast airline passenger numbers",\n      "properties": {\n        "customProperties": {\n          "team": "forecasting"\n        }\n      }\n    }\n  }\n}\n')))),(0,t.yg)("h3",{id:"create-a-training-run"},"Create a Training Run"),(0,t.yg)("p",null,"A training run captures all details about a specific model training attempt."),(0,t.yg)(r.A,{mdxType:"Tabs"},(0,t.yg)(l.A,{value:"basic",label:"Basic",mdxType:"TabItem"},"Create a basic training run:",(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},'client.create_training_run(\n    run_id="simple_training_run_4",\n)\n'))),(0,t.yg)(l.A,{value:"advanced",label:"Advanced",mdxType:"TabItem"},"Include metrics, parameters, and other important metadata:",(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},'client.create_training_run(\n    run_id="simple_training_run_4",\n    properties=models.DataProcessInstancePropertiesClass(\n        name="Simple Training Run 4",\n        created=models.AuditStampClass(\n            time=1628580000000, actor="urn:li:corpuser:datahub"\n        ),\n        customProperties={"team": "forecasting"},\n    ),\n    training_run_properties=models.MLTrainingRunPropertiesClass(\n        id="simple_training_run_4",\n        outputUrls=["s3://my-bucket/output"],\n        trainingMetrics=[models.MLMetricClass(name="accuracy", value="0.9")],\n        hyperParams=[models.MLHyperParamClass(name="learning_rate", value="0.01")],\n        externalUrl="https:localhost:5000",\n    ),\n    run_result=RunResultType.FAILURE,\n    start_timestamp=1628580000000,\n    end_timestamp=1628580001000,\n)\n')))),(0,t.yg)("p",null,"Verify your training run:"),(0,t.yg)(r.A,{mdxType:"Tabs"},(0,t.yg)(l.A,{value:"UI",label:"UI",mdxType:"TabItem"},"View the run details in the UI:",(0,t.yg)("p",{align:"center"},(0,t.yg)("img",{width:"70%",src:"https://raw.githubusercontent.com/datahub-project/static-assets/main/imgs/apis/tutorials/ml/run-empty.png"}))),(0,t.yg)(l.A,{value:"graphql",label:"GraphQL",mdxType:"TabItem"},"Query your training run:",(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-graphql"},'query {\n  dataProcessInstance(\n    urn:"urn:li:dataProcessInstance:simple_training_run_4"\n  ) {\n    name\n    created {\n      time\n    }\n    properties {\n      customProperties\n    }\n  }\n}\n')),(0,t.yg)("p",null,"Check the response:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "dataProcessInstance": {\n      "name": "Simple Training Run 4",\n      "created": {\n        "time": 1628580000000\n      },\n      "properties": {\n        "customProperties": {\n          "team": "forecasting"\n        }\n      }\n    }\n  }\n}\n')))),(0,t.yg)("h2",{id:"define-entity-relationships"},"Define Entity Relationships"),(0,t.yg)("p",null,"Now let's connect these components to create a comprehensive ML system. These connections enable you to track model lineage, monitor model evolution, understand dependencies, and search effectively across your ML assets."),(0,t.yg)("h3",{id:"add-model-to-model-group"},"Add Model To Model Group"),(0,t.yg)("p",null,"Connect your model to its group:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},"client.add_model_to_model_group(model_urn=model_urn, group_urn=model_group_urn)\n")),(0,t.yg)(r.A,{mdxType:"Tabs"},(0,t.yg)(l.A,{value:"UI",label:"UI",mdxType:"TabItem"},(0,t.yg)("p",null,"View model versions in the ",(0,t.yg)("strong",{parentName:"p"},"Model Group")," under the ",(0,t.yg)("strong",{parentName:"p"},"Models")," section:"),(0,t.yg)("p",{align:"center"},(0,t.yg)("img",{width:"70%",src:"https://raw.githubusercontent.com/datahub-project/static-assets/main/imgs/apis/tutorials/ml/model-group-with-model.png"})),(0,t.yg)("p",null,"Find group information in the ",(0,t.yg)("strong",{parentName:"p"},"Model")," page under the ",(0,t.yg)("strong",{parentName:"p"},"Group")," tab:"),(0,t.yg)("p",{align:"center"},(0,t.yg)("img",{width:"70%",src:"https://raw.githubusercontent.com/datahub-project/static-assets/main/imgs/apis/tutorials/ml/model-with-model-group.png"}))),(0,t.yg)(l.A,{value:"graphql",label:"GraphQL",mdxType:"TabItem"},"Query the model-group relationship:",(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-graphql"},'query {\n  mlModel(\n    urn:"urn:li:mlModel:(urn:li:dataPlatform:mlflow,arima_model,PROD)"\n  ) {\n    name\n    properties {\n      groups {\n        urn\n        properties {\n          name\n        }\n      }\n    }\n  }\n}\n')),(0,t.yg)("p",null,"Check the response:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "mlModel": {\n      "name": "arima_model",\n      "properties": {\n        "groups": [\n          {\n            "urn": "urn:li:mlModelGroup:(urn:li:dataPlatform:mlflow,airline_forecast_model_group,PROD)",\n            "properties": {\n              "name": "Airline Forecast Model Group"\n            }\n          }\n        ]\n      }\n    }\n  }\n}\n')))),(0,t.yg)("h3",{id:"add-run-to-experiment"},"Add Run To Experiment"),(0,t.yg)("p",null,"Connect a training run to its experiment:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},"client.add_run_to_experiment(run_urn=run_urn, experiment_urn=experiment_urn)\n")),(0,t.yg)(r.A,{mdxType:"Tabs"},(0,t.yg)(l.A,{value:"UI",label:"UI",mdxType:"TabItem"},(0,t.yg)("p",null,"Find your runs in the ",(0,t.yg)("strong",{parentName:"p"},"Experiment")," page under the ",(0,t.yg)("strong",{parentName:"p"},"Entities")," tab:"),(0,t.yg)("p",{align:"center"},(0,t.yg)("img",{width:"70%",src:"https://raw.githubusercontent.com/datahub-project/static-assets/main/imgs/apis/tutorials/ml/experiment-with-run.png"})),(0,t.yg)("p",null,"See the experiment details in the ",(0,t.yg)("strong",{parentName:"p"},"Run")," page:"),(0,t.yg)("p",{align:"center"},(0,t.yg)("img",{width:"40%",src:"https://raw.githubusercontent.com/datahub-project/static-assets/main/imgs/apis/tutorials/ml/run-with-experiment.png"}))),(0,t.yg)(l.A,{value:"graphql",label:"GraphQL",mdxType:"TabItem"},"Query the run-experiment relationship:",(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-graphql"},'query {\n  dataProcessInstance(\n    urn:"urn:li:dataProcessInstance:simple_training_run"\n  ) {\n    name\n    parentContainers {\n      containers {\n        urn\n        properties {\n          name\n        }\n      }\n    }\n  }\n}\n')),(0,t.yg)("p",null,"View the relationship details:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "dataProcessInstance": {\n      "name": "Simple Training Run",\n      "parentContainers": {\n        "containers": [\n          {\n            "urn": "urn:li:container:airline_forecast_experiment",\n            "properties": {\n              "name": "Airline Forecast Experiment"\n            }\n          }\n        ]\n      }\n    }\n  }\n}\n')))),(0,t.yg)("h3",{id:"add-run-to-model"},"Add Run To Model"),(0,t.yg)("p",null,"Connect a training run to its resulting model:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},"client.add_run_to_model(model_urn=model_urn, run_urn=run_urn)\n")),(0,t.yg)("p",null,"This relationship enables you to:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Track which runs produced each model"),(0,t.yg)("li",{parentName:"ul"},"Understand model provenance"),(0,t.yg)("li",{parentName:"ul"},"Debug model issues"),(0,t.yg)("li",{parentName:"ul"},"Monitor model evolution")),(0,t.yg)(r.A,{mdxType:"Tabs"},(0,t.yg)(l.A,{value:"UI",label:"UI",mdxType:"TabItem"},(0,t.yg)("p",null,"Find the source run in the ",(0,t.yg)("strong",{parentName:"p"},"Model")," page under the ",(0,t.yg)("strong",{parentName:"p"},"Summary")," tab:"),(0,t.yg)("p",{align:"center"},(0,t.yg)("img",{width:"70%",src:"https://raw.githubusercontent.com/datahub-project/static-assets/main/imgs/apis/tutorials/ml/model-with-source-run.png"})),(0,t.yg)("p",null,"See related models in the ",(0,t.yg)("strong",{parentName:"p"},"Run")," page under the ",(0,t.yg)("strong",{parentName:"p"},"Lineage")," tab:"),(0,t.yg)("p",{align:"center"},(0,t.yg)("img",{width:"70%",src:"https://raw.githubusercontent.com/datahub-project/static-assets/main/imgs/apis/tutorials/ml/run-lineage-model.png"})),(0,t.yg)("p",{align:"center"},(0,t.yg)("img",{width:"50%",src:"https://raw.githubusercontent.com/datahub-project/static-assets/main/imgs/apis/tutorials/ml/run-lineage-model-graph.png"}))),(0,t.yg)(l.A,{value:"graphql",label:"GraphQL",mdxType:"TabItem"},"Query the model's training jobs:",(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-graphql"},'query {\n  mlModel(\n    urn:"urn:li:mlModel:(urn:li:dataPlatform:mlflow,arima_model,PROD)"\n  ) {\n    name\n    properties {\n      mlModelLineageInfo {\n        trainingJobs\n      }\n    }\n  }\n}\n')),(0,t.yg)("p",null,"View the relationship:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "mlModel": {\n      "name": "arima_model",\n      "properties": {\n        "mlModelLineageInfo": {\n          "trainingJobs": [\n            "urn:li:dataProcessInstance:simple_training_run_test"\n          ]\n        }\n      }\n    }\n  }\n}\n')))),(0,t.yg)("h3",{id:"add-run-to-model-group"},"Add Run To Model Group"),(0,t.yg)("p",null,"Create a direct connection between a run and a model group:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},"client.add_run_to_model_group(model_group_urn=model_group_urn, run_urn=run_urn)\n")),(0,t.yg)("p",null,"This connection lets you:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"View model groups in the run's lineage"),(0,t.yg)("li",{parentName:"ul"},"Query training jobs at the group level"),(0,t.yg)("li",{parentName:"ul"},"Track training history for model families")),(0,t.yg)(r.A,{mdxType:"Tabs"},(0,t.yg)(l.A,{value:"UI",label:"UI",mdxType:"TabItem"},(0,t.yg)("p",null,"See model groups in the ",(0,t.yg)("strong",{parentName:"p"},"Run")," page under the ",(0,t.yg)("strong",{parentName:"p"},"Lineage")," tab:"),(0,t.yg)("p",{align:"center"},(0,t.yg)("img",{width:"70%",src:"https://raw.githubusercontent.com/datahub-project/static-assets/main/imgs/apis/tutorials/ml/run-lineage-model-group.png"})),(0,t.yg)("p",{align:"center"},(0,t.yg)("img",{width:"50%",src:"https://raw.githubusercontent.com/datahub-project/static-assets/main/imgs/apis/tutorials/ml/run-lineage-model-group-graph.png"}))),(0,t.yg)(l.A,{value:"graphql",label:"GraphQL",mdxType:"TabItem"},"Query the model group's training jobs:",(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-graphql"},'query {\n  mlModelGroup(\n    urn:"urn:li:mlModelGroup:(urn:li:dataPlatform:mlflow,airline_forecast_model_group,PROD)"\n  ) {\n    name\n    properties {\n      mlModelLineageInfo {\n        trainingJobs\n      }\n    }\n  }\n}\n')),(0,t.yg)("p",null,"Check the relationship:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "mlModelGroup": {\n      "name": "airline_forecast_model_group",\n      "properties": {\n        "mlModelLineageInfo": {\n          "trainingJobs": [\n            "urn:li:dataProcessInstance:simple_training_run_test"\n          ]\n        }\n      }\n    }\n  }\n}\n')))),(0,t.yg)("h3",{id:"add-dataset-to-run"},"Add Dataset To Run"),(0,t.yg)("p",null,"Track input and output datasets for your training runs:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},"client.add_input_datasets_to_run(\n    run_urn=run_urn, \n    dataset_urns=[str(input_dataset_urn)]\n)\n\nclient.add_output_datasets_to_run(\n    run_urn=run_urn, \n    dataset_urns=[str(output_dataset_urn)]\n)\n")),(0,t.yg)("p",null,"These connections help you:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Track data lineage"),(0,t.yg)("li",{parentName:"ul"},"Understand data dependencies"),(0,t.yg)("li",{parentName:"ul"},"Ensure reproducibility"),(0,t.yg)("li",{parentName:"ul"},"Monitor data quality impacts")),(0,t.yg)("p",null,"Find dataset relationships in the ",(0,t.yg)("strong",{parentName:"p"},"Lineage")," tab of either the ",(0,t.yg)("strong",{parentName:"p"},"Dataset")," or ",(0,t.yg)("strong",{parentName:"p"},"Run")," page:"),(0,t.yg)("p",{align:"center"},(0,t.yg)("img",{width:"70%",src:"https://raw.githubusercontent.com/datahub-project/static-assets/main/imgs/apis/tutorials/ml/run-lineage-dataset-graph.png"})),(0,t.yg)("h2",{id:"full-overview"},"Full Overview"),(0,t.yg)("p",null,"Here's your complete ML system with all components connected:"),(0,t.yg)("p",{align:"center"},(0,t.yg)("img",{width:"70%",src:"https://raw.githubusercontent.com/datahub-project/static-assets/main/imgs/apis/tutorials/ml/lineage-full.png"})),(0,t.yg)("p",null,"You now have a complete lineage view of your ML assets, from training data through runs to production models!"),(0,t.yg)("p",null,"You can check out the full code for this tutorial ",(0,t.yg)("a",{parentName:"p",href:"https://github.com/datahub-project/datahub/blob/master/metadata-ingestion/examples/ai/dh_ai_client_sample.py"},"here"),"."),(0,t.yg)("h2",{id:"whats-next"},"What's Next?"),(0,t.yg)("p",null,"To see these integrations in action:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Watch our ",(0,t.yg)("a",{parentName:"li",href:"https://youtu.be/_WUoVqkF2Zo?feature=shared&t=1932"},"Townhall demo")," showcasing the MLflow integration"),(0,t.yg)("li",{parentName:"ul"},"Explore our detailed documentation:",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"/docs/generated/ingestion/sources/mlflow"},"MLflow Integration Guide")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"/docs/generated/ingestion/sources/sagemaker"},"Amazon SageMaker Integration Guide"))))))}h.isMDXComponent=!0}}]);