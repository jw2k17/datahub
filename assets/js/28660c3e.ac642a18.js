"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[42190],{26157:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>d,default:()=>y,frontMatter:()=>p,metadata:()=>u,toc:()=>m});a(96540);var n=a(15680),r=a(53720),i=a(5400);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))})),e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}const p={title:"But First, Semantics: Upsert versus Patch",slug:"/advanced/patch",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/advanced/patch.md"},d="But First, Semantics: Upsert versus Patch",u={unversionedId:"docs/advanced/patch",id:"version-0.15.0/docs/advanced/patch",title:"But First, Semantics: Upsert versus Patch",description:"Why Would You Use Patch",source:"@site/versioned_docs/version-0.15.0/docs/advanced/patch.md",sourceDirName:"docs/advanced",slug:"/advanced/patch",permalink:"/docs/0.15.0/advanced/patch",draft:!1,editUrl:"https://github.com/datahub-project/datahub/blob/master/docs/advanced/patch.md",tags:[],version:"0.15.0",frontMatter:{title:"But First, Semantics: Upsert versus Patch",slug:"/advanced/patch",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/advanced/patch.md"},sidebar:"overviewSidebar",previous:{title:"Terms",permalink:"/docs/0.15.0/api/tutorials/terms"},next:{title:"Community",permalink:"/docs/0.15.0/category/community"}},c={},m=[{value:"Why Would You Use Patch",id:"why-would-you-use-patch",level:2},{value:"How To Use Patch",id:"how-to-use-patch",level:2},{value:"Add Custom Properties",id:"add-custom-properties",level:3},{value:"Add and Remove Custom Properties",id:"add-and-remove-custom-properties",level:3},{value:"Add Data Job Lineage",id:"add-data-job-lineage",level:3},{value:"Add Properties to Dataset",id:"add-properties-to-dataset",level:3},{value:"How Patch works",id:"how-patch-works",level:2},{value:"Path",id:"path",level:3},{value:"Examples",id:"examples",level:4},{value:"Operation",id:"operation",level:3},{value:"Add",id:"add",level:4},{value:"Remove",id:"remove",level:4},{value:"Value",id:"value",level:3},{value:"Examples",id:"examples-1",level:4},{value:"Implementation details",id:"implementation-details",level:3},{value:"Template Classes",id:"template-classes",level:4},{value:"ArrayMergingTemplate &amp; CompoundKeyTemplate",id:"arraymergingtemplate--compoundkeytemplate",level:5},{value:"PatchBuilders",id:"patchbuilders",level:4}],h={toc:m},g="wrapper";function y(e){var{components:t}=e,a=l(e,["components"]);return(0,n.yg)(g,s(function(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{},n=Object.keys(a);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(a).filter((function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable})))),n.forEach((function(t){o(e,t,a[t])}))}return e}({},h,a),{components:t,mdxType:"MDXLayout"}),(0,n.yg)("h1",{id:"but-first-semantics-upsert-versus-patch"},"But First, Semantics: Upsert versus Patch"),(0,n.yg)("h2",{id:"why-would-you-use-patch"},"Why Would You Use Patch"),(0,n.yg)("p",null,"By default, most of the SDK tutorials and API-s involve applying full upserts at the aspect level. This means that typically, when you want to change one field within an aspect without modifying others, you need to do a read-modify-write to not overwrite existing fields.\nTo support these scenarios, DataHub supports PATCH based operations so that targeted changes to single fields or values within arrays of fields are possible without impacting other existing metadata."),(0,n.yg)("admonition",{type:"note"},(0,n.yg)("p",{parentName:"admonition"},"Currently, PATCH support is only available for a selected set of aspects, so before pinning your hopes on using PATCH as a way to make modifications to aspect values, confirm whether your aspect supports PATCH semantics. The complete list of Aspects that are supported are maintained ",(0,n.yg)("a",{parentName:"p",href:"https://github.com/datahub-project/datahub/blob/9588440549f3d99965085e97b214a7dabc181ed2/entity-registry/src/main/java/com/linkedin/metadata/models/registry/template/AspectTemplateEngine.java#L24"},"here"),". In the near future, we do have plans to automatically support PATCH semantics for aspects by default.")),(0,n.yg)("h2",{id:"how-to-use-patch"},"How To Use Patch"),(0,n.yg)("p",null,"Examples for using Patch are sprinkled throughout the API guides.\nHere's how to find the appropriate classes for the language for your choice."),(0,n.yg)(r.A,{mdxType:"Tabs"},(0,n.yg)(i.A,{value:"Java",label:"Java SDK",mdxType:"TabItem"},(0,n.yg)("p",null,"The Java Patch builders are aspect-oriented and located in the ",(0,n.yg)("a",{parentName:"p",href:"https://github.com/datahub-project/datahub/tree/master/metadata-integration/java/datahub-client/src/main/java/datahub/client/patch"},"datahub-client")," module under the ",(0,n.yg)("inlineCode",{parentName:"p"},"datahub.client.patch")," namespace."),(0,n.yg)("p",null,"Here are a few illustrative examples using the Java Patch builders:"),(0,n.yg)("h3",{id:"add-custom-properties"},"Add Custom Properties"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-java"},'# Inlined from /metadata-integration/java/examples/src/main/java/io/datahubproject/examples/DatasetCustomPropertiesAdd.java\npackage io.datahubproject.examples;\n\nimport com.linkedin.common.urn.UrnUtils;\nimport com.linkedin.metadata.aspect.patch.builder.DatasetPropertiesPatchBuilder;\nimport com.linkedin.mxe.MetadataChangeProposal;\nimport datahub.client.MetadataWriteResponse;\nimport datahub.client.rest.RestEmitter;\nimport java.io.IOException;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.Future;\nimport lombok.extern.slf4j.Slf4j;\n\n@Slf4j\nclass DatasetCustomPropertiesAdd {\n\n  private DatasetCustomPropertiesAdd() {}\n\n  /**\n   * Adds properties to an existing custom properties aspect without affecting any existing\n   * properties\n   *\n   * @param args\n   * @throws IOException\n   * @throws ExecutionException\n   * @throws InterruptedException\n   */\n  public static void main(String[] args)\n      throws IOException, ExecutionException, InterruptedException {\n    MetadataChangeProposal datasetPropertiesProposal =\n        new DatasetPropertiesPatchBuilder()\n            .urn(UrnUtils.toDatasetUrn("hive", "fct_users_deleted", "PROD"))\n            .addCustomProperty("cluster_name", "datahubproject.acryl.io")\n            .addCustomProperty("retention_time", "2 years")\n            .build();\n\n    String token = "";\n    RestEmitter emitter = RestEmitter.create(b -> b.server("http://localhost:8080").token(token));\n    try {\n      Future<MetadataWriteResponse> response = emitter.emit(datasetPropertiesProposal);\n\n      System.out.println(response.get().getResponseContent());\n    } catch (Exception e) {\n      log.error("Failed to emit metadata to DataHub", e);\n      throw e;\n    } finally {\n      emitter.close();\n    }\n  }\n}\n\n')),(0,n.yg)("h3",{id:"add-and-remove-custom-properties"},"Add and Remove Custom Properties"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-java"},'# Inlined from /metadata-integration/java/examples/src/main/java/io/datahubproject/examples/DatasetCustomPropertiesAddRemove.java\npackage io.datahubproject.examples;\n\nimport com.linkedin.common.urn.UrnUtils;\nimport com.linkedin.metadata.aspect.patch.builder.DatasetPropertiesPatchBuilder;\nimport com.linkedin.mxe.MetadataChangeProposal;\nimport datahub.client.MetadataWriteResponse;\nimport datahub.client.rest.RestEmitter;\nimport java.io.IOException;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.Future;\nimport lombok.extern.slf4j.Slf4j;\n\n@Slf4j\nclass DatasetCustomPropertiesAddRemove {\n\n  private DatasetCustomPropertiesAddRemove() {}\n\n  /**\n   * Applies Add and Remove property operations on an existing custom properties aspect without\n   * affecting any other properties\n   *\n   * @param args\n   * @throws IOException\n   * @throws ExecutionException\n   * @throws InterruptedException\n   */\n  public static void main(String[] args)\n      throws IOException, ExecutionException, InterruptedException {\n    MetadataChangeProposal datasetPropertiesProposal =\n        new DatasetPropertiesPatchBuilder()\n            .urn(UrnUtils.toDatasetUrn("hive", "fct_users_deleted", "PROD"))\n            .addCustomProperty("cluster_name", "datahubproject.acryl.io")\n            .removeCustomProperty("retention_time")\n            .build();\n\n    String token = "";\n    RestEmitter emitter = RestEmitter.create(b -> b.server("http://localhost:8080").token(token));\n    try {\n      Future<MetadataWriteResponse> response = emitter.emit(datasetPropertiesProposal);\n\n      System.out.println(response.get().getResponseContent());\n    } catch (Exception e) {\n      log.error("Failed to emit metadata to DataHub", e);\n      throw e;\n    } finally {\n      emitter.close();\n    }\n  }\n}\n\n')),(0,n.yg)("h3",{id:"add-data-job-lineage"},"Add Data Job Lineage"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-java"},'# Inlined from /metadata-integration/java/examples/src/main/java/io/datahubproject/examples/DataJobLineageAdd.java\npackage io.datahubproject.examples;\n\nimport com.linkedin.common.urn.DataJobUrn;\nimport com.linkedin.common.urn.DatasetUrn;\nimport com.linkedin.common.urn.UrnUtils;\nimport com.linkedin.metadata.aspect.patch.builder.DataJobInputOutputPatchBuilder;\nimport com.linkedin.mxe.MetadataChangeProposal;\nimport datahub.client.MetadataWriteResponse;\nimport datahub.client.rest.RestEmitter;\nimport java.io.IOException;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.Future;\nimport lombok.extern.slf4j.Slf4j;\n\n@Slf4j\nclass DataJobLineageAdd {\n\n  private DataJobLineageAdd() {}\n\n  /**\n   * Adds lineage to an existing DataJob without affecting any lineage\n   *\n   * @param args\n   * @throws IOException\n   * @throws ExecutionException\n   * @throws InterruptedException\n   */\n  public static void main(String[] args)\n      throws IOException, ExecutionException, InterruptedException {\n    String token = "";\n    try (RestEmitter emitter =\n        RestEmitter.create(b -> b.server("http://localhost:8080").token(token))) {\n      MetadataChangeProposal dataJobIOPatch =\n          new DataJobInputOutputPatchBuilder()\n              .urn(\n                  UrnUtils.getUrn(\n                      "urn:li:dataJob:(urn:li:dataFlow:(airflow,dag_abc,PROD),task_456)"))\n              .addInputDatasetEdge(\n                  DatasetUrn.createFromString(\n                      "urn:li:dataset:(urn:li:dataPlatform:kafka,SampleKafkaDataset,PROD)"))\n              .addOutputDatasetEdge(\n                  DatasetUrn.createFromString(\n                      "urn:li:dataset:(urn:li:dataPlatform:kafka,SampleHiveDataset,PROD)"))\n              .addInputDatajobEdge(\n                  DataJobUrn.createFromString(\n                      "urn:li:dataJob:(urn:li:dataFlow:(airflow,dag_abc,PROD),task_123)"))\n              .addInputDatasetField(\n                  UrnUtils.getUrn(\n                      "urn:li:schemaField:(urn:li:dataset:(urn:li:dataPlatform:hive,fct_users_deleted,PROD),user_id)"))\n              .addOutputDatasetField(\n                  UrnUtils.getUrn(\n                      "urn:li:schemaField:(urn:li:dataset:(urn:li:dataPlatform:hive,fct_users_created,PROD),user_id)"))\n              .build();\n\n      Future<MetadataWriteResponse> response = emitter.emit(dataJobIOPatch);\n\n      System.out.println(response.get().getResponseContent());\n    } catch (Exception e) {\n      log.error("Failed to emit metadata to DataHub", e);\n      throw new RuntimeException(e);\n    }\n  }\n}\n\n'))),(0,n.yg)(i.A,{value:"Python",label:"Python SDK",default:!0,mdxType:"TabItem"},(0,n.yg)("p",null,"The Python Patch builders are entity-oriented and located in the ",(0,n.yg)("a",{parentName:"p",href:"https://github.com/datahub-project/datahub/tree/9588440549f3d99965085e97b214a7dabc181ed2/metadata-ingestion/src/datahub/specific"},"metadata-ingestion")," module and located in the ",(0,n.yg)("inlineCode",{parentName:"p"},"datahub.specific")," module."),(0,n.yg)("p",null,"Here are a few illustrative examples using the Python Patch builders:"),(0,n.yg)("h3",{id:"add-properties-to-dataset"},"Add Properties to Dataset"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/dataset_add_properties.py\nimport logging\nfrom typing import Union\n\nfrom datahub.configuration.kafka import KafkaProducerConnectionConfig\nfrom datahub.emitter.kafka_emitter import DatahubKafkaEmitter, KafkaEmitterConfig\nfrom datahub.emitter.mce_builder import make_dataset_urn\nfrom datahub.emitter.rest_emitter import DataHubRestEmitter\nfrom datahub.specific.dataset import DatasetPatchBuilder\n\nlog = logging.getLogger(__name__)\nlogging.basicConfig(level=logging.INFO)\n\n\n# Get an emitter, either REST or Kafka, this example shows you both\ndef get_emitter() -> Union[DataHubRestEmitter, DatahubKafkaEmitter]:\n    USE_REST_EMITTER = True\n    if USE_REST_EMITTER:\n        gms_endpoint = "http://localhost:8080"\n        return DataHubRestEmitter(gms_server=gms_endpoint)\n    else:\n        kafka_server = "localhost:9092"\n        schema_registry_url = "http://localhost:8081"\n        return DatahubKafkaEmitter(\n            config=KafkaEmitterConfig(\n                connection=KafkaProducerConnectionConfig(\n                    bootstrap=kafka_server, schema_registry_url=schema_registry_url\n                )\n            )\n        )\n\n\ndataset_urn = make_dataset_urn(platform="hive", name="fct_users_created", env="PROD")\n\nwith get_emitter() as emitter:\n    for patch_mcp in (\n        DatasetPatchBuilder(dataset_urn)\n        .add_custom_property("cluster_name", "datahubproject.acryl.io")\n        .add_custom_property("retention_time", "2 years")\n        .build()\n    ):\n        emitter.emit(patch_mcp)\n\n\nlog.info(f"Added cluster_name, retention_time properties to dataset {dataset_urn}")\n\n')))),(0,n.yg)("h2",{id:"how-patch-works"},"How Patch works"),(0,n.yg)("p",null,"To understand how patching works, it's important to understand a bit about our ",(0,n.yg)("a",{parentName:"p",href:"/docs/0.15.0/what/aspect"},"models"),". Entities are comprised of Aspects\nwhich can be reasoned about as JSON representations of the object models. To be able to patch these we utilize ",(0,n.yg)("a",{parentName:"p",href:"https://jsonpatch.com/"},"JsonPatch"),". The components of a JSON Patch are the path, operation, and value."),(0,n.yg)("h3",{id:"path"},"Path"),(0,n.yg)("p",null,"The JSON path refers to a value within the schema. This can be a single field or can be an entire object reference depending on what the path is.\nFor our patches we are primarily targeting single fields or even single array elements within a field. To be able to target array elements by id, we go through a translation process\nof the schema to transform arrays into maps. This allows a path to reference a particular array element by key rather than by index, for example a specific tag urn being added to a dataset.\nThis is important to note that for some fields in our schema that are arrays which do not necessarily restrict uniqueness, this puts a uniqueness constraint on the key.\nThe key for objects stored in arrays is determined manually by examining the schema and a long term goal is to make these keys annotation driven to reduce the amount of code needed to support\nadditional aspects to be patched. There is a generic patch endpoint, but it requires any array field keys to be specified at request time, putting a lot of burden on the API user."),(0,n.yg)("h4",{id:"examples"},"Examples"),(0,n.yg)("p",null,"A patch path for targeting an upstream dataset:"),(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"/upstreams/urn:li:dataset:(urn:li:dataPlatform:hive,fct_users_created_upstream,PROD)")),(0,n.yg)("p",null,"Breakdown:"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"/upstreams")," -> References the upstreams field of the UpstreamLineage aspect, this is an array of Upstream objects where the key is the Urn"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"/urn:...")," -> The dataset to be targeted by the operation")),(0,n.yg)("p",null,"A patch path for targeting a fine grained lineage upstream:"),(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"/fineGrainedLineages/TRANSFORM/urn:li:schemaField:(urn:li:dataset:(urn:li:dataPlatform:hive,fct_users_created,PROD),foo)/urn:li:query:queryId/urn:li:schemaField:(urn:li:dataset:(urn:li:dataPlatform:hive,fct_users_created_upstream,PROD),bar)")),(0,n.yg)("p",null,"Breakdown:"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"/fineGrainedLineages")," -> References the fineGrainedLineages field on an UpstreamLineage, this is an array of FineGrainedLineage objects keyed on transformOperation, downstream urn, and query urn"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"/TRANSFORM")," -> transformOperation, one of the fields determining the key for a fineGrainedLineage"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"/urn:li:schemaField:...")," -> The downstream schemaField referenced in this schema, part of the key for a fineGrainedLineage"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"/urn:li:query:...")," -> The query urn this relationship was derived from, part of the key for a fineGrainedLineage"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"/urn:li:schemaField:")," -> The upstream urn that is being targeted by this patch operation")),(0,n.yg)("p",null,"This showcases that in some cases the key for objects is simple, in others in can be complex to determine, but for our fully supported use cases we have\nSDK support on both the Java and Python side that will generate these patches for you as long as you supply the required method parameters.\nPath is generally the most complicated portion of a patch to reason about as it requires intimate knowledge of the schema and models."),(0,n.yg)("h3",{id:"operation"},"Operation"),(0,n.yg)("p",null,"Operation is a limited enum of a few supported types pulled directly from the JSON Patch spec. DataHub only supports ",(0,n.yg)("inlineCode",{parentName:"p"},"ADD")," and ",(0,n.yg)("inlineCode",{parentName:"p"},"REMOVE")," of these options\nas the other patch operations do not currently have a use case within our system."),(0,n.yg)("h4",{id:"add"},"Add"),(0,n.yg)("p",null,"Add is a bit of a misnomer for the JSON Patch spec, it is not an explicit add but an upsert/replace. If the path specified does not exist, it will be created,\nbut if the path already exists the value will be replaced. Patch operations apply at a path level so it is possible to do full replaces of arrays or objects in the schema\nusing adds, but generally the most useful use case for patch is to add elements to arrays without affecting the other elements as full upserts are supported by standard ingestion."),(0,n.yg)("h4",{id:"remove"},"Remove"),(0,n.yg)("p",null,"Remove operations require the path specified to be present, or an error will be thrown, otherwise they operate as one would expect. The specified path will be removed from the aspect."),(0,n.yg)("h3",{id:"value"},"Value"),(0,n.yg)("p",null,"Value is the actual information that will be stored at a path. If the path references an object then this will include the JSON key value pairs for that object."),(0,n.yg)("h4",{id:"examples-1"},"Examples"),(0,n.yg)("p",null,"An example UpstreamLineage object value:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "auditStamp": {\n    "time": 0,\n    "actor": "urn:li:corpuser:unknown"\n  },\n  "dataset": "urn:li:dataset:(urn:li:dataPlatform:s3,my-bucket/my-folder/my-file.txt,PROD)",\n  "type": "TRANSFORMED"\n}\n')),(0,n.yg)("p",null,"For the previous path example (",(0,n.yg)("inlineCode",{parentName:"p"},"/upstreams/urn:li:dataset:(urn:li:dataPlatform:hive,fct_users_created_upstream,PROD)"),"), this object would represent the UpstreamLineage object for that path.\nThis specifies the required fields to properly represent that object. Note: by modifying this path, you could reference a single field within the UpstreamLineage object itself, like so:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "path": "/upstreams/urn:li:dataset:(urn:li:dataPlatform:hive,fct_users_created_upstream,PROD)/type",\n  "op": "ADD",\n  "value": "VIEW"\n}\n')),(0,n.yg)("h3",{id:"implementation-details"},"Implementation details"),(0,n.yg)("h4",{id:"template-classes"},"Template Classes"),(0,n.yg)("p",null,"Template classes are the mechanism that maps fields to their corresponding JSON paths. Since DataMaps are not true JSON, first we convert a RecordTemplate to a JSON String,\nperform any additional process to map array fields to their keys, apply the patch, and then convert the JSON object back to a RecordTemplate to work with the rest of the application."),(0,n.yg)("p",null,"The template classes we currently support can be found in the ",(0,n.yg)("inlineCode",{parentName:"p"},"entity-registry")," module. They are split up by aspect, with the GenericTemplate applying to any non-directly supported aspects.\nThe GenericTemplate allows for use cases that we have not gotten around to directly support yet, but puts more burden on the user to generate patches correctly."),(0,n.yg)("p",null,"The template classes are utilized in ",(0,n.yg)("inlineCode",{parentName:"p"},"EntityServiceImpl")," where a MCP is determined to be either a patch or standard upsert which then routes through to the stored templates registered on the EntityRegistry.\nThe core logical flow each Template runs through is set up in the ",(0,n.yg)("inlineCode",{parentName:"p"},"Template")," interface, with some more specific logic in the lower level interfaces for constructing/deconstructing array field keys.\nMost of the complexity around these classes is knowledge of schema and JSON path traversals."),(0,n.yg)("h5",{id:"arraymergingtemplate--compoundkeytemplate"},"ArrayMergingTemplate & CompoundKeyTemplate"),(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"ArrayMergingTemplate")," is utilized for any aspect which has array fields and may either be used directly or use ",(0,n.yg)("inlineCode",{parentName:"p"},"CompoundKeyTemplate"),". ",(0,n.yg)("inlineCode",{parentName:"p"},"ArrayMergingTemplate")," is the simpler one that can only be used directly for\nsingle value keys. ",(0,n.yg)("inlineCode",{parentName:"p"},"CompoundKeyTemplate")," allows for support of multi-field keys. For more complex examples like FineGrainedLineage, further logic is needed to construct a key as it is not generalizable to other aspects, see ",(0,n.yg)("inlineCode",{parentName:"p"},"UpstreamLineageTemplate")," for full special case implementation."),(0,n.yg)("h4",{id:"patchbuilders"},"PatchBuilders"),(0,n.yg)("p",null,"There are patch builder SDK classes for constructing patches in both Java and Python. The Java patch builders all extend ",(0,n.yg)("inlineCode",{parentName:"p"},"AbstractMultiFieldPatchBuilder")," which sets up the\nbase functionality for patch builder subtypes. Each implementation of this abstract class is targeted at a particular aspect and contains specific field based update methods\nfor the most common use cases. On the Python side patch builders live in the ",(0,n.yg)("inlineCode",{parentName:"p"},"src/specific/")," directory and are organized by entity type."))}y.isMDXComponent=!0}}]);